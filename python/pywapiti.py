# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywapiti', [dirname(__file__)])
        except ImportError:
            import _pywapiti
            return _pywapiti
        if fp is not None:
            try:
                _mod = imp.load_module('_pywapiti', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywapiti = swig_import_helper()
    del swig_import_helper
else:
    import _pywapiti
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def tag_label(*args):
  return _pywapiti.tag_label(*args)
tag_label = _pywapiti.tag_label
class mdl_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mdl_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mdl_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opt"] = _pywapiti.mdl_s_opt_set
    __swig_getmethods__["opt"] = _pywapiti.mdl_s_opt_get
    if _newclass:opt = _swig_property(_pywapiti.mdl_s_opt_get, _pywapiti.mdl_s_opt_set)
    __swig_setmethods__["type"] = _pywapiti.mdl_s_type_set
    __swig_getmethods__["type"] = _pywapiti.mdl_s_type_get
    if _newclass:type = _swig_property(_pywapiti.mdl_s_type_get, _pywapiti.mdl_s_type_set)
    __swig_setmethods__["nlbl"] = _pywapiti.mdl_s_nlbl_set
    __swig_getmethods__["nlbl"] = _pywapiti.mdl_s_nlbl_get
    if _newclass:nlbl = _swig_property(_pywapiti.mdl_s_nlbl_get, _pywapiti.mdl_s_nlbl_set)
    __swig_setmethods__["nobs"] = _pywapiti.mdl_s_nobs_set
    __swig_getmethods__["nobs"] = _pywapiti.mdl_s_nobs_get
    if _newclass:nobs = _swig_property(_pywapiti.mdl_s_nobs_get, _pywapiti.mdl_s_nobs_set)
    __swig_setmethods__["nftr"] = _pywapiti.mdl_s_nftr_set
    __swig_getmethods__["nftr"] = _pywapiti.mdl_s_nftr_get
    if _newclass:nftr = _swig_property(_pywapiti.mdl_s_nftr_get, _pywapiti.mdl_s_nftr_set)
    __swig_setmethods__["kind"] = _pywapiti.mdl_s_kind_set
    __swig_getmethods__["kind"] = _pywapiti.mdl_s_kind_get
    if _newclass:kind = _swig_property(_pywapiti.mdl_s_kind_get, _pywapiti.mdl_s_kind_set)
    __swig_setmethods__["uoff"] = _pywapiti.mdl_s_uoff_set
    __swig_getmethods__["uoff"] = _pywapiti.mdl_s_uoff_get
    if _newclass:uoff = _swig_property(_pywapiti.mdl_s_uoff_get, _pywapiti.mdl_s_uoff_set)
    __swig_setmethods__["boff"] = _pywapiti.mdl_s_boff_set
    __swig_getmethods__["boff"] = _pywapiti.mdl_s_boff_get
    if _newclass:boff = _swig_property(_pywapiti.mdl_s_boff_get, _pywapiti.mdl_s_boff_set)
    __swig_setmethods__["theta"] = _pywapiti.mdl_s_theta_set
    __swig_getmethods__["theta"] = _pywapiti.mdl_s_theta_get
    if _newclass:theta = _swig_property(_pywapiti.mdl_s_theta_get, _pywapiti.mdl_s_theta_set)
    __swig_setmethods__["train"] = _pywapiti.mdl_s_train_set
    __swig_getmethods__["train"] = _pywapiti.mdl_s_train_get
    if _newclass:train = _swig_property(_pywapiti.mdl_s_train_get, _pywapiti.mdl_s_train_set)
    __swig_setmethods__["devel"] = _pywapiti.mdl_s_devel_set
    __swig_getmethods__["devel"] = _pywapiti.mdl_s_devel_get
    if _newclass:devel = _swig_property(_pywapiti.mdl_s_devel_get, _pywapiti.mdl_s_devel_set)
    __swig_setmethods__["reader"] = _pywapiti.mdl_s_reader_set
    __swig_getmethods__["reader"] = _pywapiti.mdl_s_reader_get
    if _newclass:reader = _swig_property(_pywapiti.mdl_s_reader_get, _pywapiti.mdl_s_reader_set)
    __swig_setmethods__["werr"] = _pywapiti.mdl_s_werr_set
    __swig_getmethods__["werr"] = _pywapiti.mdl_s_werr_get
    if _newclass:werr = _swig_property(_pywapiti.mdl_s_werr_get, _pywapiti.mdl_s_werr_set)
    __swig_setmethods__["wcnt"] = _pywapiti.mdl_s_wcnt_set
    __swig_getmethods__["wcnt"] = _pywapiti.mdl_s_wcnt_get
    if _newclass:wcnt = _swig_property(_pywapiti.mdl_s_wcnt_get, _pywapiti.mdl_s_wcnt_set)
    __swig_setmethods__["wpos"] = _pywapiti.mdl_s_wpos_set
    __swig_getmethods__["wpos"] = _pywapiti.mdl_s_wpos_get
    if _newclass:wpos = _swig_property(_pywapiti.mdl_s_wpos_get, _pywapiti.mdl_s_wpos_set)
    __swig_setmethods__["timer"] = _pywapiti.mdl_s_timer_set
    __swig_getmethods__["timer"] = _pywapiti.mdl_s_timer_get
    if _newclass:timer = _swig_property(_pywapiti.mdl_s_timer_get, _pywapiti.mdl_s_timer_set)
    __swig_setmethods__["total"] = _pywapiti.mdl_s_total_set
    __swig_getmethods__["total"] = _pywapiti.mdl_s_total_get
    if _newclass:total = _swig_property(_pywapiti.mdl_s_total_get, _pywapiti.mdl_s_total_set)
    def __init__(self): 
        this = _pywapiti.new_mdl_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_mdl_s
    __del__ = lambda self : None;
mdl_s_swigregister = _pywapiti.mdl_s_swigregister
mdl_s_swigregister(mdl_s)


def mdl_new(*args):
  return _pywapiti.mdl_new(*args)
mdl_new = _pywapiti.mdl_new

def mdl_free(*args):
  return _pywapiti.mdl_free(*args)
mdl_free = _pywapiti.mdl_free

def mdl_sync(*args):
  return _pywapiti.mdl_sync(*args)
mdl_sync = _pywapiti.mdl_sync

def mdl_compact(*args):
  return _pywapiti.mdl_compact(*args)
mdl_compact = _pywapiti.mdl_compact

def mdl_save(*args):
  return _pywapiti.mdl_save(*args)
mdl_save = _pywapiti.mdl_save

def mdl_load(*args):
  return _pywapiti.mdl_load(*args)
mdl_load = _pywapiti.mdl_load

def mdl_save_path(*args):
  return _pywapiti.mdl_save_path(*args)
mdl_save_path = _pywapiti.mdl_save_path

def mdl_load_path(*args):
  return _pywapiti.mdl_load_path(*args)
mdl_load_path = _pywapiti.mdl_load_path
class opt_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _pywapiti.opt_s_mode_set
    __swig_getmethods__["mode"] = _pywapiti.opt_s_mode_get
    if _newclass:mode = _swig_property(_pywapiti.opt_s_mode_get, _pywapiti.opt_s_mode_set)
    __swig_setmethods__["input"] = _pywapiti.opt_s_input_set
    __swig_getmethods__["input"] = _pywapiti.opt_s_input_get
    if _newclass:input = _swig_property(_pywapiti.opt_s_input_get, _pywapiti.opt_s_input_set)
    __swig_setmethods__["output"] = _pywapiti.opt_s_output_set
    __swig_getmethods__["output"] = _pywapiti.opt_s_output_get
    if _newclass:output = _swig_property(_pywapiti.opt_s_output_get, _pywapiti.opt_s_output_set)
    __swig_setmethods__["maxent"] = _pywapiti.opt_s_maxent_set
    __swig_getmethods__["maxent"] = _pywapiti.opt_s_maxent_get
    if _newclass:maxent = _swig_property(_pywapiti.opt_s_maxent_get, _pywapiti.opt_s_maxent_set)
    __swig_setmethods__["type"] = _pywapiti.opt_s_type_set
    __swig_getmethods__["type"] = _pywapiti.opt_s_type_get
    if _newclass:type = _swig_property(_pywapiti.opt_s_type_get, _pywapiti.opt_s_type_set)
    __swig_setmethods__["algo"] = _pywapiti.opt_s_algo_set
    __swig_getmethods__["algo"] = _pywapiti.opt_s_algo_get
    if _newclass:algo = _swig_property(_pywapiti.opt_s_algo_get, _pywapiti.opt_s_algo_set)
    __swig_setmethods__["pattern"] = _pywapiti.opt_s_pattern_set
    __swig_getmethods__["pattern"] = _pywapiti.opt_s_pattern_get
    if _newclass:pattern = _swig_property(_pywapiti.opt_s_pattern_get, _pywapiti.opt_s_pattern_set)
    __swig_setmethods__["model"] = _pywapiti.opt_s_model_set
    __swig_getmethods__["model"] = _pywapiti.opt_s_model_get
    if _newclass:model = _swig_property(_pywapiti.opt_s_model_get, _pywapiti.opt_s_model_set)
    __swig_setmethods__["devel"] = _pywapiti.opt_s_devel_set
    __swig_getmethods__["devel"] = _pywapiti.opt_s_devel_get
    if _newclass:devel = _swig_property(_pywapiti.opt_s_devel_get, _pywapiti.opt_s_devel_set)
    __swig_setmethods__["rstate"] = _pywapiti.opt_s_rstate_set
    __swig_getmethods__["rstate"] = _pywapiti.opt_s_rstate_get
    if _newclass:rstate = _swig_property(_pywapiti.opt_s_rstate_get, _pywapiti.opt_s_rstate_set)
    __swig_setmethods__["sstate"] = _pywapiti.opt_s_sstate_set
    __swig_getmethods__["sstate"] = _pywapiti.opt_s_sstate_get
    if _newclass:sstate = _swig_property(_pywapiti.opt_s_sstate_get, _pywapiti.opt_s_sstate_set)
    __swig_setmethods__["compact"] = _pywapiti.opt_s_compact_set
    __swig_getmethods__["compact"] = _pywapiti.opt_s_compact_get
    if _newclass:compact = _swig_property(_pywapiti.opt_s_compact_get, _pywapiti.opt_s_compact_set)
    __swig_setmethods__["sparse"] = _pywapiti.opt_s_sparse_set
    __swig_getmethods__["sparse"] = _pywapiti.opt_s_sparse_get
    if _newclass:sparse = _swig_property(_pywapiti.opt_s_sparse_get, _pywapiti.opt_s_sparse_set)
    __swig_setmethods__["nthread"] = _pywapiti.opt_s_nthread_set
    __swig_getmethods__["nthread"] = _pywapiti.opt_s_nthread_get
    if _newclass:nthread = _swig_property(_pywapiti.opt_s_nthread_get, _pywapiti.opt_s_nthread_set)
    __swig_setmethods__["jobsize"] = _pywapiti.opt_s_jobsize_set
    __swig_getmethods__["jobsize"] = _pywapiti.opt_s_jobsize_get
    if _newclass:jobsize = _swig_property(_pywapiti.opt_s_jobsize_get, _pywapiti.opt_s_jobsize_set)
    __swig_setmethods__["maxiter"] = _pywapiti.opt_s_maxiter_set
    __swig_getmethods__["maxiter"] = _pywapiti.opt_s_maxiter_get
    if _newclass:maxiter = _swig_property(_pywapiti.opt_s_maxiter_get, _pywapiti.opt_s_maxiter_set)
    __swig_setmethods__["rho1"] = _pywapiti.opt_s_rho1_set
    __swig_getmethods__["rho1"] = _pywapiti.opt_s_rho1_get
    if _newclass:rho1 = _swig_property(_pywapiti.opt_s_rho1_get, _pywapiti.opt_s_rho1_set)
    __swig_setmethods__["rho2"] = _pywapiti.opt_s_rho2_set
    __swig_getmethods__["rho2"] = _pywapiti.opt_s_rho2_get
    if _newclass:rho2 = _swig_property(_pywapiti.opt_s_rho2_get, _pywapiti.opt_s_rho2_set)
    __swig_setmethods__["objwin"] = _pywapiti.opt_s_objwin_set
    __swig_getmethods__["objwin"] = _pywapiti.opt_s_objwin_get
    if _newclass:objwin = _swig_property(_pywapiti.opt_s_objwin_get, _pywapiti.opt_s_objwin_set)
    __swig_setmethods__["stopwin"] = _pywapiti.opt_s_stopwin_set
    __swig_getmethods__["stopwin"] = _pywapiti.opt_s_stopwin_get
    if _newclass:stopwin = _swig_property(_pywapiti.opt_s_stopwin_get, _pywapiti.opt_s_stopwin_set)
    __swig_setmethods__["stopeps"] = _pywapiti.opt_s_stopeps_set
    __swig_getmethods__["stopeps"] = _pywapiti.opt_s_stopeps_get
    if _newclass:stopeps = _swig_property(_pywapiti.opt_s_stopeps_get, _pywapiti.opt_s_stopeps_set)
    __swig_setmethods__["label"] = _pywapiti.opt_s_label_set
    __swig_getmethods__["label"] = _pywapiti.opt_s_label_get
    if _newclass:label = _swig_property(_pywapiti.opt_s_label_get, _pywapiti.opt_s_label_set)
    __swig_setmethods__["check"] = _pywapiti.opt_s_check_set
    __swig_getmethods__["check"] = _pywapiti.opt_s_check_get
    if _newclass:check = _swig_property(_pywapiti.opt_s_check_get, _pywapiti.opt_s_check_set)
    __swig_setmethods__["outsc"] = _pywapiti.opt_s_outsc_set
    __swig_getmethods__["outsc"] = _pywapiti.opt_s_outsc_get
    if _newclass:outsc = _swig_property(_pywapiti.opt_s_outsc_get, _pywapiti.opt_s_outsc_set)
    __swig_setmethods__["lblpost"] = _pywapiti.opt_s_lblpost_set
    __swig_getmethods__["lblpost"] = _pywapiti.opt_s_lblpost_get
    if _newclass:lblpost = _swig_property(_pywapiti.opt_s_lblpost_get, _pywapiti.opt_s_lblpost_set)
    __swig_setmethods__["nbest"] = _pywapiti.opt_s_nbest_set
    __swig_getmethods__["nbest"] = _pywapiti.opt_s_nbest_get
    if _newclass:nbest = _swig_property(_pywapiti.opt_s_nbest_get, _pywapiti.opt_s_nbest_set)
    __swig_setmethods__["force"] = _pywapiti.opt_s_force_set
    __swig_getmethods__["force"] = _pywapiti.opt_s_force_get
    if _newclass:force = _swig_property(_pywapiti.opt_s_force_get, _pywapiti.opt_s_force_set)
    __swig_setmethods__["prec"] = _pywapiti.opt_s_prec_set
    __swig_getmethods__["prec"] = _pywapiti.opt_s_prec_get
    if _newclass:prec = _swig_property(_pywapiti.opt_s_prec_get, _pywapiti.opt_s_prec_set)
    __swig_setmethods__["all"] = _pywapiti.opt_s_all_set
    __swig_getmethods__["all"] = _pywapiti.opt_s_all_get
    if _newclass:all = _swig_property(_pywapiti.opt_s_all_get, _pywapiti.opt_s_all_set)
    __swig_getmethods__["lbfgs"] = _pywapiti.opt_s_lbfgs_get
    if _newclass:lbfgs = _swig_property(_pywapiti.opt_s_lbfgs_get)
    __swig_getmethods__["sgdl1"] = _pywapiti.opt_s_sgdl1_get
    if _newclass:sgdl1 = _swig_property(_pywapiti.opt_s_sgdl1_get)
    __swig_getmethods__["bcd"] = _pywapiti.opt_s_bcd_get
    if _newclass:bcd = _swig_property(_pywapiti.opt_s_bcd_get)
    __swig_getmethods__["rprop"] = _pywapiti.opt_s_rprop_get
    if _newclass:rprop = _swig_property(_pywapiti.opt_s_rprop_get)
    def __init__(self): 
        this = _pywapiti.new_opt_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_opt_s
    __del__ = lambda self : None;
opt_s_swigregister = _pywapiti.opt_s_swigregister
opt_s_swigregister(opt_s)

class opt_s_rprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_s_rprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_s_rprop, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stpmin"] = _pywapiti.opt_s_rprop_stpmin_set
    __swig_getmethods__["stpmin"] = _pywapiti.opt_s_rprop_stpmin_get
    if _newclass:stpmin = _swig_property(_pywapiti.opt_s_rprop_stpmin_get, _pywapiti.opt_s_rprop_stpmin_set)
    __swig_setmethods__["stpmax"] = _pywapiti.opt_s_rprop_stpmax_set
    __swig_getmethods__["stpmax"] = _pywapiti.opt_s_rprop_stpmax_get
    if _newclass:stpmax = _swig_property(_pywapiti.opt_s_rprop_stpmax_get, _pywapiti.opt_s_rprop_stpmax_set)
    __swig_setmethods__["stpinc"] = _pywapiti.opt_s_rprop_stpinc_set
    __swig_getmethods__["stpinc"] = _pywapiti.opt_s_rprop_stpinc_get
    if _newclass:stpinc = _swig_property(_pywapiti.opt_s_rprop_stpinc_get, _pywapiti.opt_s_rprop_stpinc_set)
    __swig_setmethods__["stpdec"] = _pywapiti.opt_s_rprop_stpdec_set
    __swig_getmethods__["stpdec"] = _pywapiti.opt_s_rprop_stpdec_get
    if _newclass:stpdec = _swig_property(_pywapiti.opt_s_rprop_stpdec_get, _pywapiti.opt_s_rprop_stpdec_set)
    __swig_setmethods__["cutoff"] = _pywapiti.opt_s_rprop_cutoff_set
    __swig_getmethods__["cutoff"] = _pywapiti.opt_s_rprop_cutoff_get
    if _newclass:cutoff = _swig_property(_pywapiti.opt_s_rprop_cutoff_get, _pywapiti.opt_s_rprop_cutoff_set)
    def __init__(self): 
        this = _pywapiti.new_opt_s_rprop()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_opt_s_rprop
    __del__ = lambda self : None;
opt_s_rprop_swigregister = _pywapiti.opt_s_rprop_swigregister
opt_s_rprop_swigregister(opt_s_rprop)

class opt_s_bcd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_s_bcd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_s_bcd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kappa"] = _pywapiti.opt_s_bcd_kappa_set
    __swig_getmethods__["kappa"] = _pywapiti.opt_s_bcd_kappa_get
    if _newclass:kappa = _swig_property(_pywapiti.opt_s_bcd_kappa_get, _pywapiti.opt_s_bcd_kappa_set)
    def __init__(self): 
        this = _pywapiti.new_opt_s_bcd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_opt_s_bcd
    __del__ = lambda self : None;
opt_s_bcd_swigregister = _pywapiti.opt_s_bcd_swigregister
opt_s_bcd_swigregister(opt_s_bcd)

class opt_s_sgdl1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_s_sgdl1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_s_sgdl1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eta0"] = _pywapiti.opt_s_sgdl1_eta0_set
    __swig_getmethods__["eta0"] = _pywapiti.opt_s_sgdl1_eta0_get
    if _newclass:eta0 = _swig_property(_pywapiti.opt_s_sgdl1_eta0_get, _pywapiti.opt_s_sgdl1_eta0_set)
    __swig_setmethods__["alpha"] = _pywapiti.opt_s_sgdl1_alpha_set
    __swig_getmethods__["alpha"] = _pywapiti.opt_s_sgdl1_alpha_get
    if _newclass:alpha = _swig_property(_pywapiti.opt_s_sgdl1_alpha_get, _pywapiti.opt_s_sgdl1_alpha_set)
    def __init__(self): 
        this = _pywapiti.new_opt_s_sgdl1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_opt_s_sgdl1
    __del__ = lambda self : None;
opt_s_sgdl1_swigregister = _pywapiti.opt_s_sgdl1_swigregister
opt_s_sgdl1_swigregister(opt_s_sgdl1)

class opt_s_lbfgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_s_lbfgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_s_lbfgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clip"] = _pywapiti.opt_s_lbfgs_clip_set
    __swig_getmethods__["clip"] = _pywapiti.opt_s_lbfgs_clip_get
    if _newclass:clip = _swig_property(_pywapiti.opt_s_lbfgs_clip_get, _pywapiti.opt_s_lbfgs_clip_set)
    __swig_setmethods__["histsz"] = _pywapiti.opt_s_lbfgs_histsz_set
    __swig_getmethods__["histsz"] = _pywapiti.opt_s_lbfgs_histsz_get
    if _newclass:histsz = _swig_property(_pywapiti.opt_s_lbfgs_histsz_get, _pywapiti.opt_s_lbfgs_histsz_set)
    __swig_setmethods__["maxls"] = _pywapiti.opt_s_lbfgs_maxls_set
    __swig_getmethods__["maxls"] = _pywapiti.opt_s_lbfgs_maxls_get
    if _newclass:maxls = _swig_property(_pywapiti.opt_s_lbfgs_maxls_get, _pywapiti.opt_s_lbfgs_maxls_set)
    def __init__(self): 
        this = _pywapiti.new_opt_s_lbfgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_opt_s_lbfgs
    __del__ = lambda self : None;
opt_s_lbfgs_swigregister = _pywapiti.opt_s_lbfgs_swigregister
opt_s_lbfgs_swigregister(opt_s_lbfgs)


def opt_parse(*args):
  return _pywapiti.opt_parse(*args)
opt_parse = _pywapiti.opt_parse

def uit_setup(*args):
  return _pywapiti.uit_setup(*args)
uit_setup = _pywapiti.uit_setup

def uit_cleanup(*args):
  return _pywapiti.uit_cleanup(*args)
uit_cleanup = _pywapiti.uit_cleanup

def uit_progress(*args):
  return _pywapiti.uit_progress(*args)
uit_progress = _pywapiti.uit_progress

def qrk_new():
  return _pywapiti.qrk_new()
qrk_new = _pywapiti.qrk_new

def qrk_free(*args):
  return _pywapiti.qrk_free(*args)
qrk_free = _pywapiti.qrk_free

def qrk_count(*args):
  return _pywapiti.qrk_count(*args)
qrk_count = _pywapiti.qrk_count

def qrk_lock(*args):
  return _pywapiti.qrk_lock(*args)
qrk_lock = _pywapiti.qrk_lock

def qrk_id2str(*args):
  return _pywapiti.qrk_id2str(*args)
qrk_id2str = _pywapiti.qrk_id2str

def qrk_str2id(*args):
  return _pywapiti.qrk_str2id(*args)
qrk_str2id = _pywapiti.qrk_str2id

def qrk_load(*args):
  return _pywapiti.qrk_load(*args)
qrk_load = _pywapiti.qrk_load

def qrk_save(*args):
  return _pywapiti.qrk_save(*args)
qrk_save = _pywapiti.qrk_save
class rdr_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rdr_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rdr_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autouni"] = _pywapiti.rdr_s_autouni_set
    __swig_getmethods__["autouni"] = _pywapiti.rdr_s_autouni_get
    if _newclass:autouni = _swig_property(_pywapiti.rdr_s_autouni_get, _pywapiti.rdr_s_autouni_set)
    __swig_setmethods__["npats"] = _pywapiti.rdr_s_npats_set
    __swig_getmethods__["npats"] = _pywapiti.rdr_s_npats_get
    if _newclass:npats = _swig_property(_pywapiti.rdr_s_npats_get, _pywapiti.rdr_s_npats_set)
    __swig_setmethods__["nuni"] = _pywapiti.rdr_s_nuni_set
    __swig_getmethods__["nuni"] = _pywapiti.rdr_s_nuni_get
    if _newclass:nuni = _swig_property(_pywapiti.rdr_s_nuni_get, _pywapiti.rdr_s_nuni_set)
    __swig_setmethods__["nbi"] = _pywapiti.rdr_s_nbi_set
    __swig_getmethods__["nbi"] = _pywapiti.rdr_s_nbi_get
    if _newclass:nbi = _swig_property(_pywapiti.rdr_s_nbi_get, _pywapiti.rdr_s_nbi_set)
    __swig_setmethods__["ntoks"] = _pywapiti.rdr_s_ntoks_set
    __swig_getmethods__["ntoks"] = _pywapiti.rdr_s_ntoks_get
    if _newclass:ntoks = _swig_property(_pywapiti.rdr_s_ntoks_get, _pywapiti.rdr_s_ntoks_set)
    __swig_setmethods__["pats"] = _pywapiti.rdr_s_pats_set
    __swig_getmethods__["pats"] = _pywapiti.rdr_s_pats_get
    if _newclass:pats = _swig_property(_pywapiti.rdr_s_pats_get, _pywapiti.rdr_s_pats_set)
    __swig_setmethods__["lbl"] = _pywapiti.rdr_s_lbl_set
    __swig_getmethods__["lbl"] = _pywapiti.rdr_s_lbl_get
    if _newclass:lbl = _swig_property(_pywapiti.rdr_s_lbl_get, _pywapiti.rdr_s_lbl_set)
    __swig_setmethods__["obs"] = _pywapiti.rdr_s_obs_set
    __swig_getmethods__["obs"] = _pywapiti.rdr_s_obs_get
    if _newclass:obs = _swig_property(_pywapiti.rdr_s_obs_get, _pywapiti.rdr_s_obs_set)
    def __init__(self): 
        this = _pywapiti.new_rdr_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_rdr_s
    __del__ = lambda self : None;
rdr_s_swigregister = _pywapiti.rdr_s_swigregister
rdr_s_swigregister(rdr_s)
cvar = _pywapiti.cvar
opt_defaults = cvar.opt_defaults


def rdr_new(*args):
  return _pywapiti.rdr_new(*args)
rdr_new = _pywapiti.rdr_new

def rdr_free(*args):
  return _pywapiti.rdr_free(*args)
rdr_free = _pywapiti.rdr_free

def rdr_freeraw(*args):
  return _pywapiti.rdr_freeraw(*args)
rdr_freeraw = _pywapiti.rdr_freeraw

def rdr_freeseq(*args):
  return _pywapiti.rdr_freeseq(*args)
rdr_freeseq = _pywapiti.rdr_freeseq

def rdr_freedat(*args):
  return _pywapiti.rdr_freedat(*args)
rdr_freedat = _pywapiti.rdr_freedat

def rdr_loadpat(*args):
  return _pywapiti.rdr_loadpat(*args)
rdr_loadpat = _pywapiti.rdr_loadpat

def rdr_readraw(*args):
  return _pywapiti.rdr_readraw(*args)
rdr_readraw = _pywapiti.rdr_readraw

def rdr_raw2seq(*args):
  return _pywapiti.rdr_raw2seq(*args)
rdr_raw2seq = _pywapiti.rdr_raw2seq

def rdr_readseq(*args):
  return _pywapiti.rdr_readseq(*args)
rdr_readseq = _pywapiti.rdr_readseq

def rdr_readdat(*args):
  return _pywapiti.rdr_readdat(*args)
rdr_readdat = _pywapiti.rdr_readdat

def rdr_load(*args):
  return _pywapiti.rdr_load(*args)
rdr_load = _pywapiti.rdr_load

def rdr_save(*args):
  return _pywapiti.rdr_save(*args)
rdr_save = _pywapiti.rdr_save

def rdr_readline(*args):
  return _pywapiti.rdr_readline(*args)
rdr_readline = _pywapiti.rdr_readline
class raw_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, raw_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, raw_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _pywapiti.raw_s_len_set
    __swig_getmethods__["len"] = _pywapiti.raw_s_len_get
    if _newclass:len = _swig_property(_pywapiti.raw_s_len_get, _pywapiti.raw_s_len_set)
    __swig_getmethods__["lines"] = _pywapiti.raw_s_lines_get
    if _newclass:lines = _swig_property(_pywapiti.raw_s_lines_get)
    def __init__(self): 
        this = _pywapiti.new_raw_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_raw_s
    __del__ = lambda self : None;
raw_s_swigregister = _pywapiti.raw_s_swigregister
raw_s_swigregister(raw_s)

class tok_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tok_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tok_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _pywapiti.tok_s_len_set
    __swig_getmethods__["len"] = _pywapiti.tok_s_len_get
    if _newclass:len = _swig_property(_pywapiti.tok_s_len_get, _pywapiti.tok_s_len_set)
    __swig_setmethods__["lbl"] = _pywapiti.tok_s_lbl_set
    __swig_getmethods__["lbl"] = _pywapiti.tok_s_lbl_get
    if _newclass:lbl = _swig_property(_pywapiti.tok_s_lbl_get, _pywapiti.tok_s_lbl_set)
    __swig_setmethods__["cnts"] = _pywapiti.tok_s_cnts_set
    __swig_getmethods__["cnts"] = _pywapiti.tok_s_cnts_get
    if _newclass:cnts = _swig_property(_pywapiti.tok_s_cnts_get, _pywapiti.tok_s_cnts_set)
    __swig_getmethods__["toks"] = _pywapiti.tok_s_toks_get
    if _newclass:toks = _swig_property(_pywapiti.tok_s_toks_get)
    def __init__(self): 
        this = _pywapiti.new_tok_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_tok_s
    __del__ = lambda self : None;
tok_s_swigregister = _pywapiti.tok_s_swigregister
tok_s_swigregister(tok_s)

class seq_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seq_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seq_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _pywapiti.seq_s_len_set
    __swig_getmethods__["len"] = _pywapiti.seq_s_len_get
    if _newclass:len = _swig_property(_pywapiti.seq_s_len_get, _pywapiti.seq_s_len_set)
    __swig_setmethods__["raw"] = _pywapiti.seq_s_raw_set
    __swig_getmethods__["raw"] = _pywapiti.seq_s_raw_get
    if _newclass:raw = _swig_property(_pywapiti.seq_s_raw_get, _pywapiti.seq_s_raw_set)
    __swig_getmethods__["pos"] = _pywapiti.seq_s_pos_get
    if _newclass:pos = _swig_property(_pywapiti.seq_s_pos_get)
    def __init__(self): 
        this = _pywapiti.new_seq_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_seq_s
    __del__ = lambda self : None;
seq_s_swigregister = _pywapiti.seq_s_swigregister
seq_s_swigregister(seq_s)

class seq_s_pos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seq_s_pos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seq_s_pos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lbl"] = _pywapiti.seq_s_pos_lbl_set
    __swig_getmethods__["lbl"] = _pywapiti.seq_s_pos_lbl_get
    if _newclass:lbl = _swig_property(_pywapiti.seq_s_pos_lbl_get, _pywapiti.seq_s_pos_lbl_set)
    __swig_setmethods__["ucnt"] = _pywapiti.seq_s_pos_ucnt_set
    __swig_getmethods__["ucnt"] = _pywapiti.seq_s_pos_ucnt_get
    if _newclass:ucnt = _swig_property(_pywapiti.seq_s_pos_ucnt_get, _pywapiti.seq_s_pos_ucnt_set)
    __swig_setmethods__["bcnt"] = _pywapiti.seq_s_pos_bcnt_set
    __swig_getmethods__["bcnt"] = _pywapiti.seq_s_pos_bcnt_get
    if _newclass:bcnt = _swig_property(_pywapiti.seq_s_pos_bcnt_get, _pywapiti.seq_s_pos_bcnt_set)
    __swig_setmethods__["uobs"] = _pywapiti.seq_s_pos_uobs_set
    __swig_getmethods__["uobs"] = _pywapiti.seq_s_pos_uobs_get
    if _newclass:uobs = _swig_property(_pywapiti.seq_s_pos_uobs_get, _pywapiti.seq_s_pos_uobs_set)
    __swig_setmethods__["bobs"] = _pywapiti.seq_s_pos_bobs_set
    __swig_getmethods__["bobs"] = _pywapiti.seq_s_pos_bobs_get
    if _newclass:bobs = _swig_property(_pywapiti.seq_s_pos_bobs_get, _pywapiti.seq_s_pos_bobs_set)
    def __init__(self): 
        this = _pywapiti.new_seq_s_pos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_seq_s_pos
    __del__ = lambda self : None;
seq_s_pos_swigregister = _pywapiti.seq_s_pos_swigregister
seq_s_pos_swigregister(seq_s_pos)

class dat_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dat_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dat_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lbl"] = _pywapiti.dat_s_lbl_set
    __swig_getmethods__["lbl"] = _pywapiti.dat_s_lbl_get
    if _newclass:lbl = _swig_property(_pywapiti.dat_s_lbl_get, _pywapiti.dat_s_lbl_set)
    __swig_setmethods__["mlen"] = _pywapiti.dat_s_mlen_set
    __swig_getmethods__["mlen"] = _pywapiti.dat_s_mlen_get
    if _newclass:mlen = _swig_property(_pywapiti.dat_s_mlen_get, _pywapiti.dat_s_mlen_set)
    __swig_setmethods__["nseq"] = _pywapiti.dat_s_nseq_set
    __swig_getmethods__["nseq"] = _pywapiti.dat_s_nseq_get
    if _newclass:nseq = _swig_property(_pywapiti.dat_s_nseq_get, _pywapiti.dat_s_nseq_set)
    __swig_setmethods__["seq"] = _pywapiti.dat_s_seq_set
    __swig_getmethods__["seq"] = _pywapiti.dat_s_seq_get
    if _newclass:seq = _swig_property(_pywapiti.dat_s_seq_get, _pywapiti.dat_s_seq_set)
    def __init__(self): 
        this = _pywapiti.new_dat_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywapiti.delete_dat_s
    __del__ = lambda self : None;
dat_s_swigregister = _pywapiti.dat_s_swigregister
dat_s_swigregister(dat_s)


def fatal(*args):
  return _pywapiti.fatal(*args)
fatal = _pywapiti.fatal

def pfatal(*args):
  return _pywapiti.pfatal(*args)
pfatal = _pywapiti.pfatal

def warning(*args):
  return _pywapiti.warning(*args)
warning = _pywapiti.warning

def info(*args):
  return _pywapiti.info(*args)
info = _pywapiti.info

def xmalloc(*args):
  return _pywapiti.xmalloc(*args)
xmalloc = _pywapiti.xmalloc

def xrealloc(*args):
  return _pywapiti.xrealloc(*args)
xrealloc = _pywapiti.xrealloc

def xstrdup(*args):
  return _pywapiti.xstrdup(*args)
xstrdup = _pywapiti.xstrdup

def ns_readstr(*args):
  return _pywapiti.ns_readstr(*args)
ns_readstr = _pywapiti.ns_readstr

def ns_writestr(*args):
  return _pywapiti.ns_writestr(*args)
ns_writestr = _pywapiti.ns_writestr

def fancy_fopen(*args):
  return _pywapiti.fancy_fopen(*args)
fancy_fopen = _pywapiti.fancy_fopen

def fancy_fclose(*args):
  return _pywapiti.fancy_fclose(*args)
fancy_fclose = _pywapiti.fancy_fclose

def trn_lbfgs(*args):
  return _pywapiti.trn_lbfgs(*args)
trn_lbfgs = _pywapiti.trn_lbfgs

def trn_sgdl1(*args):
  return _pywapiti.trn_sgdl1(*args)
trn_sgdl1 = _pywapiti.trn_sgdl1

def trn_bcd(*args):
  return _pywapiti.trn_bcd(*args)
trn_bcd = _pywapiti.trn_bcd

def trn_rprop(*args):
  return _pywapiti.trn_rprop(*args)
trn_rprop = _pywapiti.trn_rprop
# This file is compatible with both classic and new-style classes.


